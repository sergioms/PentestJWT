import unittest
import TestJWT
import signatures
import json
from jwt import utils


class TestTestJWT(unittest.TestCase):

    def setUp(self):
        self.token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        print(self.token)
        _, _, self.sig = self.token.split(".", 3)
        print(self.sig)
        self.secret = "your-256-bit-secret"
        self.tjwt: TestJWT = TestJWT.TestJWT.deserialize(self.token)

    def test_deserialize_no_json(self):
        no_json_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\
InN1YiI6ICIxMjM0NTY3ODkwIiwibmFtZSI6ICJKb2huIERvZSIsImlhdCI6IDE1MTYyMzkwMjI.\
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        no_json_tjwt: TestJWT = TestJWT.TestJWT.deserialize(no_json_token)
        no_json_tjwt.show_token()
        self.assertFalse(no_json_tjwt.is_json)
        self.assertEqual("HS256", no_json_tjwt.get_algorithm())
        self.assertEqual("JWT", no_json_tjwt.header['typ'])
        self.assertEqual("\"sub\": \"1234567890\",\"name\": \"John Doe\",\"iat\": 1516239022",
                         no_json_tjwt.get_payload())
        self.assertTrue(self.tjwt.verify_signature(self.secret, self.sig))

    def test_verify(self):
        self.assertTrue(self.tjwt.is_json)
        self.assertEqual("HS256", self.tjwt.get_algorithm())
        self.assertEqual("JWT", self.tjwt.header['typ'])
        self.assertEqual("1234567890", self.tjwt.get_payload()['sub'])
        self.assertEqual(1516239022, self.tjwt.get_payload()['iat'])
        self.assertEqual("John Doe", self.tjwt.get_payload()['name'])
        self.assertTrue(self.tjwt.verify_signature(self.secret, self.sig))

    def test_verification_failed_wrong_secret(self):
        self.assertTrue(self.tjwt.is_json)
        self.assertEqual("HS256", self.tjwt.get_algorithm())
        self.assertEqual("JWT", self.tjwt.header['typ'])
        self.assertEqual("1234567890", self.tjwt.get_payload()['sub'])
        self.assertEqual(1516239022, self.tjwt.get_payload()['iat'])
        self.assertEqual("John Doe", self.tjwt.get_payload()['name'])
        self.assertFalse(self.tjwt.verify_signature("Your-256-bit-secret", self.sig))

    def test_none_signature(self):
        content_to_sign = self.tjwt.build_token_without_signature()
        self.assertEqual(b'', signatures.sign('none', content_to_sign))
        self.assertEqual(b'', signatures.sign('None', content_to_sign))
        self.assertEqual(b'', signatures.sign('NONE', content_to_sign))

    def test_hs256_signature(self):
        test_sig = self.tjwt.compute_signature(self.secret)
        self.assertEqual(utils.force_bytes(self.sig), test_sig)

    def test_attack_alg_none(self):
        test_jwt_json = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        test_jwt: TestJWT = TestJWT.TestJWT.deserialize(self.token)
        attacks = test_jwt.attack_none()
        self.assertEqual(attacks.__len__(), 3)
        self.assertEqual(attacks['attack_alg_none'],
                         "eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.")
        self.assertEqual(attacks['attack_alg_None'],
                         "eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.")
        self.assertEqual(attacks['attack_alg_NONE'],
                         "eyJhbGciOiJOT05FIiwidHlwIjoiSldUIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.")

    def test_attack_payload(self):
        header = "eyJhbGciOiJIUzI1NiIsImtpZCI6Im15X2tleSIsInR5cCI6IkpXVCJ9"
        payload = "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ"
        signature = "-HQAruitA6V6IPPAFmo5nGpFVp2zvb3rF9fwkDiCVI0"
        token_kid = ".".join([header, payload, signature])
        # sample snippet from payload https://raw.githubusercontent.com/fuzzdb-project/fuzzdb/master/attack/json/JSON_Fuzzing.txt
        attacks = TestJWT.TestJWT.attack_payload(token_kid, "./test_resources/fuzzdb_json_snippet.txt")
        self.assertEqual(attacks.__len__(), 4)
        expected_header1 = {"alg": "HS256", "kid": "{\"1\":\"0\"}", "typ": "JWT"}
        header1 = json.loads(utils.base64url_decode(attacks['attack_payload_1'].split(".")[0]))
        self.assertEqual(expected_header1, header1)
        self.assertEqual(payload, attacks['attack_payload_1'].split(".")[1])
        self.assertEqual(signature, attacks['attack_payload_1'].split(".")[2])

        expected_header2 = {"alg": "HS256", "kid": "{\"1\":0}", "typ": "JWT"}
        header2 = json.loads(utils.base64url_decode(attacks['attack_payload_2'].split(".")[0]))
        self.assertEqual(expected_header2, header2)
        self.assertEqual(payload, attacks['attack_payload_2'].split(".")[1])
        self.assertEqual(signature, attacks['attack_payload_2'].split(".")[2])

        expected_header3 = {"alg": "HS256", "kid": "{\"0\":\"\\x00\"}", "typ": "JWT"}
        header3 = json.loads(utils.base64url_decode(attacks['attack_payload_3'].split(".")[0]))
        self.assertEqual(expected_header3, header3)
        self.assertEqual(payload, attacks['attack_payload_3'].split(".")[1])
        self.assertEqual(signature, attacks['attack_payload_3'].split(".")[2])

        expected_header4 = {"alg": "HS256", "kid": "{\"0\":[1,2]}", "typ": "JWT"}
        header4 = json.loads(utils.base64url_decode(attacks['attack_payload_4'].split(".")[0]))
        self.assertEqual(expected_header4, header4)
        self.assertEqual(payload, attacks['attack_payload_4'].split(".")[1])
        self.assertEqual(signature, attacks['attack_payload_4'].split(".")[2])

if __name__ == '__main__':
    unittest.main()
