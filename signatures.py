import hmac
import hashlib
import base64

from jwt import utils

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.serialization import (
    load_pem_private_key, load_pem_public_key, load_ssh_public_key
)
from cryptography.hazmat.primitives.asymmetric.rsa import (
    RSAPrivateKey, RSAPublicKey, RSAPrivateNumbers, RSAPublicNumbers,
    rsa_recover_prime_factors, rsa_crt_dmp1, rsa_crt_dmq1, rsa_crt_iqmp
)
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.backends import default_backend
from cryptography.exceptions import InvalidSignature


def verify(alg, contents, key, sig):
    key = utils.force_bytes(key)
    test_sig = ""
    if alg == "HS256":
        test_sig = utils.base64url_encode(hmac.new(key, contents, hashlib.sha256).digest())
    elif alg == "HS384":
        test_sig = utils.base64url_encode(hmac.new(key, contents, hashlib.sha384).digest())
    elif alg == "HS512":
        test_sig = utils.base64url_encode(hmac.new(key, contents, hashlib.sha512).digest())
    else:
        print("Unknown algorithm {}".format(alg))

    verified = False
    if test_sig == sig:
        verified = True
        if len(key) > 16:
            print("Signature verified using key {}...".format(key[0:16]))
        else:
            print("Signature verified using key {}...".format(key))
    else:
        if len(key) > 16:
            print("WARN Signature verification fail using key {}...".format(key[0:16]))
        else:
            print("WARN Signature verification fail using key {}...".format(key))
    return verified

